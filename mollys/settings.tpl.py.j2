# -*- coding: utf-8 -*-
"""
Django settings for mollys project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import ldap
from django.utils.translation import ugettext_lazy as _
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_URL = "{{ app_base_url }}{{ app_url }}"
APPLICATION_NAME= "{{ app_title|capitalize }}"
APPLICATION_DESC= "{{ app_desc|capitalize }}"

# CONFIGURATION FOR PRODUCTION  ====================\
#STATIC_ROOT = os.path.join(BASE_DIR, "mollys/static_produccion")
#STATICFILES_DIRS = (
#    os.path.join(BASE_DIR, "static"),
#)
#STATIC_URL='/mollys/static_production/'
#DEBUG = False

# ==================================================/



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'tfp%=#=oszs#x4wea8mkm60p=nmg3l9)jq5g1%s_ev#_4$w#&-'

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = {{ app_debug }}

ALLOWED_HOSTS = ['*']


# Application definition
INSTALLED_APPS = (
    'suit',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'jquery',
    'jquery_ui',
    'bootstrap_ui',
    'django_extensions',
    'bootstrap_themes',
    'app',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'app.middleware.ForceLangMiddleware',
)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': {{ app_debug }},
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mollys.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ db_name }}',
        'USER': '{{ db_user }}',
        'PASSWORD': '{{ db_pass }}',
        'PORT': '{{ db_port }}',
        'HOST': '{{ db_host }}',
    },
    '{{ db_user_owner }}': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ db_name }}',
        'USER': '{{ db_user_owner }}',
        'PASSWORD': '{{ db_pass_owner }}',
        'PORT': '{{ db_port }}',
        'HOST': '{{ db_host }}',
    },
}


LANGUAGE_CODE = 'es'

LANGUAGES = (
  ('es', _('Spanish')),
  ('en', _('English')),
)
USE_I18N = True


ROOT_URLCONF = 'mollys.urls'


{% if app_static_root %}
STATIC_ROOT = "{{ app_static_root }}"
{% endif %}
STATIC_URL="{{ app_static_url }}"


LOGIN_URL="{{ app_login_url }}"
LOGIN_REDIRECT_URL = "{{ app_login_redirect_url }}"

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

LOCALE_PATHS = (
     BASE_DIR + '/locale', )


# django configuration
SUIT_CONFIG = {
    'ADMIN_NAME': APPLICATION_NAME
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/
TIME_ZONE = 'America/Argentina/Buenos_Aires'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DEFAULT_CHARSET = 'utf-8'

# LDAP CONFIGURATION ====================\
LDAP_SERVER = "{{ ldap_server }}"
LDAP_DN = "{{ ldap_dn }}"
# Organizational Unit for Person
LDAP_PEOPLE = "{{ ldap_people }}"
LDAP_GROUP  = "{{ ldap_group }}"
LDAP_GROUP_FIELDS  = {{ ldap_group_fields }}  # id first!
LDAP_PEOPLE_FIELDS = {{ ldap_people_fields }} # idfirst!

LDAP_USERNAME = "{{ ldap_username }}"
LDAP_PASSWORD = "{{ ldap_password }}"
LDAP_ADMIN_USERNAME = "{{ ldap_admin_username }}"
LDAP_ADMIN_USERPASS = "{{ ldap_admin_password }}"

# Organizational Unit for Person and Person Group
LDAP_GROUP_VALIDATION = {{ ldap_group_validation }}
LDAP_GROUPS_VALID   = {{ ldap_groups_valid }}  # id first!
LDAP_GROUP_MIN_VALUE = {{ ldap_group_min_value }} # min group_id (group_id>= 500) for ldap search filter
LDAP_GROUP_SKIP_VALUES = {{ ldap_group_skip_values }} # group_id to exclude in ldap search filter
MIN_LENGTH_LDAP_USER_PASSWORD = 8
LDAP_DEFAULT_GROUPS = {{ ldap_default_groups }} # ldap default groups for each new user

# Params for create new people in ldap
LDAP_PEOPLE_OBJECTCLASSES = {{ ldap_people_objectclasses }}
LDAP_PEOPLE_PAISDOC = "{{ ldap_people_paisdoc }}"
LDAP_PEOPLE_HOMEDIRECTORY_PREFIX = "{{ ldap_people_homedirectory_prefix }}"
LDAP_PEOPLE_LOGIN_SHELL = "{{ ldap_people_login_shell }}"
#
# Domain name used to identify the institutional mail of an alternative
# Ej: the (LDAP DN)
LDAP_DOMAIN_MAIL="{{ ldap_domain_mail }}"

# =======================================/


# =================================\
# redmine configuration
REDMINE_ENABLE_TICKET_CREATION = {{ redmine_enable_ticket_creation }}
REDMINE_URL = "{{ redmine_url }}"
REDMINE_USERNAME = "{{ redmine_username }}"
REDMINE_PASSWORD = "{{ redmine_password }}"
REDMINE_PROJECT = "{{ redmine_project }}"
REDMINE_TRACKER_ID = {{ redmine_tracker_id }}
REDMINE_STATUS_ID = {{ redmine_status_id }}
REDMINE_PRIORITY_ID = {{ redmine_priority_id }}
REDMINE_ASSIGNED_TO_ID = {{ redmine_assigned_to_id }}
# =================================/


# =================================\
# django ldap configuration
#
#
# Ldap Group Type
from django_auth_ldap.config import LDAPSearch, PosixGroupType
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("ou={},{}".format(LDAP_GROUP,LDAP_DN),
                                    ldap.SCOPE_SUBTREE, "(objectClass=posixGroup)"
)
AUTH_LDAP_GROUP_TYPE =  PosixGroupType()
#
#
# User will be updated with LDAP every time the user logs in.
# Otherwise, the User will only be populated when it is automatically created.
AUTH_LDAP_ALWAYS_UPDATE_USER = True
#
#
# Simple group restrictions
# AUTH_LDAP_REQUIRE_GROUP = "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN)
# AUTH_LDAP_DENY_GROUP = "cn=denygroup,ou={},{}".format(LDAP_GROUP,LDAP_DN)
#
# Defines the django admin attribute
# according to whether the user is a member or not in the specified group
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN),
    "is_staff": "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN),
    "is_superuser": "cn=admin,ou={},{}".format(LDAP_GROUP,LDAP_DN),
}

AUTH_LDAP_SERVER_URI = LDAP_SERVER

#AUTH_LDAP_BIND_DN = ''
#AUTH_LDAP_BIND_PASSWORD = ''

AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=%s,%s" % (LDAP_PEOPLE,LDAP_DN),
                                   ldap.SCOPE_SUBTREE, "(uid=%(user)s)")

AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
    "username": "uid",
    "password": "userPassword",
}

AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)
# =================================/


# ##loggin querys in develompent
# if DEBUG:
#     import logging
#     l = logging.getLogger('django.db.backends')
#     l.setLevel(logging.DEBUG)
#     l.addHandler(logging.StreamHandler())
#     logging.basicConfig(
#         level = logging.DEBUG,
#         format = " %(levelname)s %(name)s: %(message)s",
#     )

# # Enable debug for ldap server connection
# logger = logging.getLogger('django_auth_ldap')
# logger.addHandler(logging.StreamHandler())
# logger.setLevel(logging.DEBUG)


# #database logging
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#         }
#     },
#     'loggers': {
#         'django.db.backends': {
#             'handlers': ['console'],
#             'level': 'DEBUG',
#         },
#     }
# }


