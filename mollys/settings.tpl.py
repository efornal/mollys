# -*- coding: utf-8 -*-
"""
Django settings for mollys project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

from django.utils.translation import ugettext_lazy as _
LANGUAGE_CODE = 'es'
LANGUAGES = (
  ('es', _('Spanish')),
  ('en', _('English')),
)
USE_I18N = True


# CONFIGURATION FOR PRODUCTION  ====================\
#STATIC_ROOT = os.path.join(BASE_DIR, "mollys/static_produccion")
#STATICFILES_DIRS = (
#    os.path.join(BASE_DIR, "static"),
#)
#STATIC_URL='/mollys/static_production/'
#DEBUG = False

# ==================================================/


# LDAP CONFIGURATION ====================\
# LDAP server
LDAP_SERVER = 'ldap://host_ldap:port'
# Dn for entry
LDAP_DN = 'dc=domain,dc=edu,dc=ar'

# LDAP authentication
# The admin user is used in building operations
# and modification (password and group) of a user
# The user does not admin, is used to modify only
# certain attributes (office and telephoneNumber)
LDAP_ADMIN_USERNAME='admin_username'
LDAP_ADMIN_USERPASS='admin_password'
LDAP_USERNAME='username'
LDAP_USERPASS='password'

# Organizational Unit for Person and Person Group
LDAP_GROUP  = 'Group' # ou=Entry
LDAP_PEOPLE = 'People' # ou=Entry
LDAP_PEOPLE_FIELDS = ['uid','cn'] # idfirst!
LDAP_GROUP_FIELDS  = ['gidNumber','cn']  # id first!

# It requires user authentication check further
# certain allocating a group ldap
LDAP_GROUP_VALIDATION = True
LDAP_GROUPS_VALID   = ['admin','stecnico']  # id first!

# Performs filtering to obtain LDAP groups
# min group_id (group_id>= 500) for ldap search filter
LDAP_GROUP_MIN_VALUE = 500 

# Minimum size which is required to create an LDAP user
MIN_LENGTH_LDAP_USER_PASSWORD = 8

# Attributes that are assigned by default to create a new user
LDAP_DEFAULT_GROUPS = ['audio','cdrom']
LDAP_PEOPLE_PAISDOC = "ARG"
LDAP_PEOPLE_HOMEDIRECTORY_PREFIX = "/home/"
LDAP_PEOPLE_LOGIN_SHELL = "/bin/bash"
LDAP_PEOPLE_OBJECTCLASSES = ['agente','hordeperson','inetOrgPerson',
                             'organizationalperson','person','posixaccount',
                             'shadowaccount', 'top']
# =======================================/


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'tfp%=#=oszs#x4wea8mkm60p=nmg3l9)jq5g1%s_ev#_4$w#&-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'suit',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'bootstrap_themes',
    'app',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'app.middleware.ForceLangMiddleware',
)

ROOT_URLCONF = 'mollys.urls'

STATIC_URL='/static/'

LOGIN_URL='/login/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
    '/static/',
)

LOCALE_PATHS = (
     BASE_DIR + '/locale', )


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': True,
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mollys.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'mollys_db',
        'USER': 'mollys_user',
        'PASSWORD': 'user',
        'PORT': '5432',        
        'HOST': 'localhost',
    },
    'mollys_owner': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'mollys_db',
        'USER': 'mollys_owner',
        'PASSWORD': 'owner',
        'PORT': '5432',        
        'HOST': 'localhost',
    },
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/
TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DEFAULT_CHARSET = 'utf-8'


# =================================\
# django configuration
SUIT_CONFIG = {
    'ADMIN_NAME': _('title')
}

# =================================\
# django ldap configuration
#
#
# Ldap Group Type
from django_auth_ldap.config import LDAPSearch, PosixGroupType
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("ou={},{}".format(LDAP_GROUP,LDAP_DN),
                                    ldap.SCOPE_SUBTREE, "(objectClass=posixGroup)"
)
AUTH_LDAP_GROUP_TYPE =  PosixGroupType()
#
#
# User will be updated with LDAP every time the user logs in.
# Otherwise, the User will only be populated when it is automatically created.
AUTH_LDAP_ALWAYS_UPDATE_USER = True
#
#
# Simple group restrictions
# AUTH_LDAP_REQUIRE_GROUP = "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN)
# AUTH_LDAP_DENY_GROUP = "cn=denygroup,ou={},{}".format(LDAP_GROUP,LDAP_DN)
#
# Defines the django admin attribute
# according to whether the user is a member or not in the specified group
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN),
    "is_staff": "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN),
    "is_superuser": "cn=admin,ou={},{}".format(LDAP_GROUP,LDAP_DN),
}

AUTH_LDAP_SERVER_URI = LDAP_SERVER

AUTH_LDAP_BIND_DN = ''
AUTH_LDAP_BIND_PASSWORD = ''

AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=%s,%s" % (LDAP_PEOPLE,LDAP_DN),
                                   ldap.SCOPE_SUBTREE, "(uid=%(user)s)")
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
    "username": "uid",
    "password": "userPassword",
}

AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)
# =================================/


# loggin querys in develompent
# if DEBUG:
#     import logging
#     l = logging.getLogger('django.db.backends')
#     l.setLevel(logging.DEBUG)
#     l.addHandler(logging.StreamHandler())
#     logging.basicConfig(
#         level = logging.DEBUG,
#         format = " %(levelname)s %(name)s: %(message)s",
#     )
